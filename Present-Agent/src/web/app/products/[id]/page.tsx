import Link from "next/link";
import { getProduct } from "../../../lib/api";
import CategoryEditor from "./CategoryEditor";

export default async function ProductPage({ params }: { params: { id: string } }) {
  const { item: p, facets, suggestions, additionalCategories } = await getProduct(params.id);
  return (
    <div className="p-4">
      <div className="mx-auto max-w-3xl">
        <div className="mb-3">
          <Link href="/products" className="text-blue-600 hover:underline">&larr; Back to Products</Link>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            {/* eslint-disable-next-line @next/next/no-img-element */}
            {p.imageUrl ? (
              <img src={p.imageUrl} alt={p.title} className="w-full rounded-xl" />
            ) : (
              <div className="h-80 bg-gray-100 rounded-xl" />
            )}
          </div>
          <div>
            <h1 className="text-3xl font-extrabold m-0">{p.title}</h1>
            <div className="text-gray-500 mt-1">{p.category && p.category !== 'Uncategorized' ? p.category : ''}</div>

            {/* Quick attribute summary */}
            {Array.isArray(facets) && facets.length > 0 && (
              <div className="mt-2 flex flex-wrap gap-1.5">
                {facets.filter(f => ['occasion', 'recipient', 'value'].includes(f.facet_key)).slice(0, 4).map((f, i) => (
                  <span key={i} className="inline-flex items-center rounded-full bg-blue-50 text-blue-700 border border-blue-200 px-2 py-0.5 text-xs font-medium">
                    {f.facet_value.replace(/_/g, ' ')}
                  </span>
                ))}
              </div>
            )}

            <div className="mt-3 font-bold text-xl">{(p.currency || "USD")} {p.price.toFixed(2)}</div>
            <div className="mt-2">
              <div className="text-xs uppercase text-gray-500">Category</div>
              <div className="mt-1 flex flex-wrap gap-2">
                {p.category && p.category !== 'Uncategorized' ? (
                  <span className={`rounded-full px-2 py-1 text-xs border bg-gray-100 text-gray-800 border-gray-200`}>{p.category}</span>
                ) : null}
                {Array.isArray(additionalCategories) && additionalCategories.map((name, i) => (
                  <span key={i} className="rounded-full bg-indigo-100 text-indigo-800 border border-indigo-200 px-2 py-1 text-xs" title="Generated by Present Agent">{name}</span>
                ))}
              </div>
              <div className="mt-2">
                <CategoryEditor productId={p.id} currentPrimary={p.category || undefined} />
              </div>
            </div>
            <div className="mt-3 grid grid-cols-1 gap-1 text-sm">
              {p.vendor && (
                <div><span className="text-gray-500">Vendor:</span> <span className="text-gray-900">{p.vendor}</span></div>
              )}
              <div>
                <span className="text-gray-500">Website:</span> <span className="text-gray-900">
                  {(() => { 
                    try { 
                      const host = new URL(p.productUrl).hostname; 
                      return <a href={p.productUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline">{host}</a>;
                    } catch { 
                      return <a href={p.productUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline">{p.productUrl}</a>;
                    } 
                  })()}
                </span>
              </div>
            </div>
            {/* Why This Gift suggestion based on facets */}
            {Array.isArray(facets) && facets.length > 0 && (
              <div className="mt-3 rounded-lg bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 p-3">
                <div className="text-xs font-semibold uppercase text-blue-900 mb-1">Why This Gift?</div>
                <div className="text-sm text-blue-800">
                  {(() => {
                    const occasions = facets.filter(f => f.facet_key === 'occasion').map(f => f.facet_value.replace(/_/g, ' '));
                    const recipients = facets.filter(f => f.facet_key === 'recipient').map(f => f.facet_value.replace(/for_|_/g, ' '));
                    const values = facets.filter(f => f.facet_key === 'value').map(f => f.facet_value.replace(/_/g, ' '));
                    const themes = facets.filter(f => f.facet_key === 'theme').map(f => f.facet_value);
                    const interests = facets.filter(f => f.facet_key === 'interest').map(f => f.facet_value);

                    const parts: string[] = [];

                    if (occasions.length > 0) {
                      parts.push(`Perfect for ${occasions.slice(0, 2).join(' or ')}`);
                    }

                    if (recipients.length > 0) {
                      parts.push(`Great gift for ${recipients.slice(0, 2).join(' and ')}`);
                    }

                    if (values.length > 0) {
                      parts.push(`${values.slice(0, 2).join(' and ')} choice`);
                    } else if (themes.length > 0) {
                      parts.push(`${themes[0]} style`);
                    }

                    if (interests.length > 0) {
                      parts.push(`ideal for ${interests.slice(0, 2).join(' and ')} enthusiasts`);
                    }

                    return parts.length > 0
                      ? parts.join('. ') + '.'
                      : 'A thoughtful gift choice based on its unique attributes.';
                  })()}
                </div>
              </div>
            )}

            {p.description ? (
              <div className="mt-3">
                <div className="text-xs font-medium uppercase text-gray-600 mb-1">Description</div>
                <p className="text-sm leading-relaxed text-gray-700">{p.description}</p>
              </div>
            ) : null}
            {Array.isArray(facets) && facets.length > 0 && (
              <div className="mt-4 border-t pt-4">
                <h2 className="text-base font-semibold text-gray-900 mb-3">Gift Attributes</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {(() => {
                    // Group facets by key
                    const grouped: Record<string, typeof facets> = {};
                    facets.forEach(f => {
                      if (!grouped[f.facet_key]) grouped[f.facet_key] = [];
                      grouped[f.facet_key].push(f);
                    });

                    // Define display order and labels
                    const displayOrder = ['occasion', 'recipient', 'interest', 'value', 'theme', 'material', 'color', 'age_range', 'feature', 'price_band'];
                    const labels: Record<string, string> = {
                      occasion: 'Occasions',
                      recipient: 'Perfect For',
                      interest: 'Interests',
                      value: 'Values',
                      theme: 'Style',
                      material: 'Materials',
                      color: 'Colors',
                      age_range: 'Age Range',
                      feature: 'Features',
                      price_band: 'Price Range',
                    };

                    return displayOrder.map(k => {
                      const kv = grouped[k];
                      if (!kv || kv.length === 0) return null;
                      return (
                        <div key={k}>
                          <div className="text-xs font-medium uppercase text-gray-600 mb-1.5">{labels[k] || k}</div>
                          <div className="flex flex-wrap gap-1.5">
                            {kv.map((f, i) => (
                              <span
                                key={i}
                                className={`inline-flex items-center rounded-full px-2.5 py-1 text-xs border ${
                                  f.source === 'ml' || f.source === 'rules'
                                    ? 'bg-indigo-50 text-indigo-700 border-indigo-200'
                                    : 'bg-gray-50 text-gray-700 border-gray-200'
                                }`}
                                title={f.source ? `Extracted via ${f.source === 'ml' ? 'AI' : f.source}, confidence: ${f.confidence || 'N/A'}` : undefined}
                              >
                                {f.facet_value.replace(/_/g, ' ')}
                              </span>
                            ))}
                          </div>
                        </div>
                      );
                    });
                  })()}
                </div>
                <div className="mt-3 text-xs text-gray-500 flex items-center gap-2">
                  <span>Legend:</span>
                  <span className="inline-flex items-center rounded-full bg-indigo-50 text-indigo-700 border border-indigo-200 px-2 py-0.5">AI-extracted</span>
                  <span className="inline-flex items-center rounded-full bg-gray-50 text-gray-700 border border-gray-200 px-2 py-0.5">From source</span>
                </div>
              </div>
            )}
            <div className="mt-4">
              <a href={p.productUrl} target="_blank" rel="noreferrer" className="inline-block bg-gray-900 text-white px-4 py-2 rounded-md">View on site</a>
            </div>
          </div>
        </div>
        {Array.isArray(suggestions) && suggestions.length > 0 && (
          <div className="mt-6 rounded-md border border-blue-200 bg-blue-50 p-3 text-sm text-blue-900">
            <div className="font-medium">Category suggestions</div>
            <div className="mt-2 text-xs">Top suggestions (confidence): {suggestions.map(s=>`${s.suggested_category_id} (${s.confidence})`).join(', ')}</div>
          </div>
        )}
      </div>
    </div>
  );
}
